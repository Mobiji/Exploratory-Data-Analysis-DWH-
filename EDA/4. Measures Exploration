/*
==============================================================================================================================
		MEASURES EXPLORATION
==============================================================================================================================
*/

/*
	- Here, I went ahead to explore the key metrics of the business. (The big numbers of the business).
	- The highest level of aggregation or the lowest level of details in the business.
    
    clause used: Aggregate function [Measure]
*/

select *
from gold.fact_sales;

-- Find the total sales
select sum(sales_amount)
from gold.fact_sales;
-- Result: 29,356,250 total revenue.
-- ===========================================================================================================================

-- Find how many items are sold
select sum(quantity)
from gold.fact_sales;
-- Result: 60,423 total items sold
-- ===========================================================================================================================

-- Find the average selling price
select sum(sales_amount) / sum(quantity) Avg_Price
from gold.fact_sales;
-- Result: 485.85 (This means that the business is selling fairly expensive items).
-- ===========================================================================================================================

-- Find the total number of orders
/* 
	- Keeping in mind that a single order might contain multiple items, one cannot go and directly 
      use count(order_number). 'count (distinct order_number)' will capture the real figure.
*/

select count(distinct order_number)
from gold.fact_sales;
-- Result: 27,659 total distinct orders in the business.
-- ===========================================================================================================================

-- Find the total number of registered products in the business.
select count(distinct product_name)
from gold.dim_products;
-- Result: 295 distinct products in the business.


-- Find the total number of distinct products sold
select 	count(distinct DP.product_name) dst_prducts
from gold.fact_sales FS
left join gold.dim_products DP
	on FS.product_key = DP.product_key;
/* 	Result: The business was able to sell a total of 130 distinct products out of 295 total registered products (44%).
	This suggests that the larger share of registrered products are inactive in terms of revenue generation which might be as
    a result of poor marketing or the products may be obsolete. This reveals potential for product optimization or
    merchandising review in order to optimize or retire poor performers.
*/	
-- ===========================================================================================================================

-- Find the total number of registered customers in the business.
select count(distinct customer_id)
from gold.dim_customers;

-- Find the total number of customers who placed an order
select 	count(distinct DC.customer_name)
from gold.fact_sales FS
left join gold.dim_customers DC
	on FS.customer_key = DC.customer_key;
/*
	- Result: The business was able to sell to a total of 18,399 distinct customers out of 18484 total registered customers.
    - This is inaccurate given that duplicates had already been removed prior to this data entering the gold layer.
	- So where/who are the other 85 customers?
*/
   
select customer_name
from gold.dim_customers
where customer_name not in (select distinct customer_name 
from gold.dim_customers);
/*
	- Result: NIL. This is impossible because the above query should be able to display the missing 85 customers.
    - So I decided to run the following query to see the duplicates:
*/

select customer_name, count(*)
from gold.dim_customers
group by customer_name
having count(*) > 1;
/*
        - Result: Multiple records with duplicates as per their 'customer_name' column.
        - I then decided to investigate further by isolating one of the customer names that had a duplicate:
*/        
select *
from gold.dim_customers
where customer_name = 'Jordan King';
/*
		- Result: 'Jordan King' is a customer name belonging to 2 distinct customers coming from different countries.
        - So the missing 85 customers are not duplicates but are customers who APPARENTLY share full names.

So the REAL number of distinct customers who placed an order is actually all the registered customers which is 18,484.
This is 100% conversion rate which is usally highly unlikely. It might be that only actual buyers are being recorded.
(i.e. the gold.dim_customers table may only contain customers who have made at least one purchase).
*/
-- ===========================================================================================================================

/* 	
	Now I want to go ahead and aggregate all these big numbers of the business into a single output (a report) so that
	it becomes easy to see the business in numbers quickly and more effciently.
*/

-- Generating the report that shows the key metrics of the business
select 'Total Revenue' as 'Metric', sum(sales_amount) Measure_Value
from gold.fact_sales
union all
select 'Total Items Sold', sum(quantity)
from gold.fact_sales
union all
select 'Average Selling Price', round(sum(sales_amount) / sum(quantity), 0) Avg_Price
from gold.fact_sales
union all
select 'Total Orders', count(distinct order_number)
from gold.fact_sales
union all
select 'Total  Registerd Products', count(distinct product_name)
from gold.dim_products
union all
select 	'Products Actually Bought', count(distinct DP.product_name) dst_prducts
from gold.fact_sales FS
left join gold.dim_products DP
	on FS.product_key = DP.product_key
union all
select 'Total Registred Customers', count(distinct customer_id)
from gold.dim_customers
union all
select 	'Customers That Have Placed An Order', count(distinct DC.customer_id)
from gold.fact_sales FS
left join gold.dim_customers DC
	on FS.customer_key = DC.customer_key;
-- ===========================================================================================================================

-- I will go ahead to place the above report in a stored procedure in order to access this info easier in future if need be.

Delimiter $$
	create procedure Business_Metrics ()
		begin
			select 'Total Revenue' as 'Metric', sum(sales_amount) Measure_Value
			from gold.fact_sales
			union all
			select 'Total Items Sold', sum(quantity)
			from gold.fact_sales
			union all
			select 'Average Selling Price', round(sum(sales_amount) / sum(quantity), 0) Avg_Price
			from gold.fact_sales
			union all
			select 'Total Orders', count(distinct order_number)
			from gold.fact_sales
			union all
			select 'Total  Registerd Products', count(distinct product_name)
			from gold.dim_products
			union all
			select 	'Products Actually Bought', count(distinct DP.product_name) dst_prducts
			from gold.fact_sales FS
			left join gold.dim_products DP
				on FS.product_key = DP.product_key
			union all
			select 'Total Registred Customers', count(distinct customer_id)
			from gold.dim_customers
			union all
			select 	'Customers That Have Placed An Order', count(distinct DC.customer_id)
			from gold.fact_sales FS
			left join gold.dim_customers DC
				on FS.customer_key = DC.customer_key;
		end $$
Delimiter ;

-- To call on the procedure above use 'call Business_Metrics()'
/*
==============================================================================================================================
*/
